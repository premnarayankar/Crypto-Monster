{"version":3,"file":"static/js/915.d485a1f3.chunk.js","mappings":"mRAkBAA,EAAAA,GAAAA,SACEC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,GACAC,EAAAA,EACAC,EAAAA,IAGF,IAAMC,GAAYC,EAAAA,EAAAA,GAAW,CAC3BC,UAAW,CACTC,QAAS,OACTC,cAAe,SACfC,WAAY,SACZC,eAAgB,SAChBC,UAAW,GACXC,QAAS,MA6Gb,UAzGiB,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClB,GAAwCC,EAAAA,EAAAA,YAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,GAAjC,eAAOG,EAAP,KAAaC,EAAb,KAqBMC,GAAWC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAWA,EAAMC,OAAOC,KAAxB,IACvBC,EAAmB,yCAAG,2GACHC,IAAAA,KAAUC,EAAAA,EAAAA,IAAgBb,EAAKc,GAAIV,EAAME,IADtC,gBAClBS,EADkB,EAClBA,KACRZ,EAAgBY,EAAKC,QAFK,2CAAH,sDAKzBC,EAAAA,EAAAA,YAAU,WACRN,GACD,GAAE,CAACL,EAAUF,IAEd,IAAMc,EAAU3B,IAEhB,OACE,SAAC,IAAD,CAAK4B,MAAO,CAAEC,GAAI,OAAQC,GAAI,OAASC,UAAWJ,EAAQzB,UAA1D,SACIS,GAOA,iCACE,SAAC,KAAD,CACEa,KAAM,CACJQ,OAAQrB,EAAasB,KAAI,SAACxB,GACxB,IAAIyB,EAAO,IAAIC,KAAK1B,EAAK,IACrB2B,EACFF,EAAKG,WAAa,GAAlB,UACOH,EAAKG,WAAa,GADzB,YAC+BH,EAAKI,aADpC,iBAEOJ,EAAKG,WAFZ,YAE0BH,EAAKI,aAF/B,OAGF,OAAgB,IAATzB,EAAauB,EAAOF,EAAKK,oBACjC,IAEDC,SAAU,CACR,CACEhB,KAAMb,EAAasB,KAAI,SAACxB,GAAD,OAAUA,EAAK,EAAf,IACvBgC,MAAM,gBAAD,OAAkB5B,EAAlB,sBAAoCE,GACzC2B,YAAa,aAInBC,QAAS,CACPC,SAAU,CACRC,MAAO,CACLC,OAAQ,QAKhB,SAAC,IAAD,CACEC,GAAI,CACF5C,QAAS,OACTG,eAAgB,gBAElBsB,MAAO,OACPoB,GAAI,GANN,SApEU,CAChB,CACEP,MAAO,WACPtB,MAAO,GAET,CACEsB,MAAO,UACPtB,MAAO,IAET,CACEsB,MAAO,WACPtB,MAAO,IAET,CACEsB,MAAO,SACPtB,MAAO,MA6DUc,KAAI,SAACgB,GAAD,OACb,SAAC,IAAD,CACEC,KAAK,QACLH,GAAI,CACFI,gBAAiB,UACjBC,WAAY,OACZC,MAAO,UACP,UAAW,CACTF,gBAAiB,YAIrBG,QAAS,YACTC,QAAS,kBAAMzC,EAAQmC,EAAI9B,MAAlB,EAZX,SAcG8B,EAAIR,OAJAQ,EAAIR,MAXE,UA1CnB,SAAC,IAAD,CACEe,MAAO,CAAEH,MAAO,WAChBH,KAAM,IACNO,UAAW,KA8DpB,C","sources":["components/CoinInfo.jsx"],"sourcesContent":["import { Box, Button, CircularProgress } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport axios from \"axios\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport {\r\n  Chart,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n} from \"chart.js\";\r\nimport { HistoricalChart } from \"../config/api\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nChart.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend\r\n);\r\n\r\nconst useStyles = makeStyles({\r\n  container: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    marginTop: 25,\r\n    padding: 40,\r\n  },\r\n});\r\n\r\nconst CoinInfo = ({ coin }) => {\r\n  const [historicData, setHistoricData] = useState();\r\n  const [days, setDays] = useState(1);\r\n\r\n  const chartDays = [\r\n    {\r\n      label: \"24 Hours\",\r\n      value: 1,\r\n    },\r\n    {\r\n      label: \"30 Days\",\r\n      value: 30,\r\n    },\r\n    {\r\n      label: \"3 Months\",\r\n      value: 90,\r\n    },\r\n    {\r\n      label: \"1 Year\",\r\n      value: 365,\r\n    },\r\n  ];\r\n\r\n  const currency = useSelector((state) => state.crypto.value);\r\n  const fetchHistoricalData = async () => {\r\n    const { data } = await axios.get(HistoricalChart(coin.id, days, currency));\r\n    setHistoricData(data.prices);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchHistoricalData();\r\n  }, [currency, days]);\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Box width={{ xs: \"100%\", md: \"60%\" }} className={classes.container}>\r\n      {!historicData ? (\r\n        <CircularProgress\r\n          style={{ color: \"#00ffa1\" }}\r\n          size={250}\r\n          thickness={1}\r\n        />\r\n      ) : (\r\n        <>\r\n          <Line\r\n            data={{\r\n              labels: historicData.map((coin) => {\r\n                let date = new Date(coin[0]);\r\n                let time =\r\n                  date.getHours() > 12\r\n                    ? `${date.getHours() - 12}:${date.getMinutes()} PM`\r\n                    : `${date.getHours()}:${date.getMinutes()} AM`;\r\n                return days === 1 ? time : date.toLocaleDateString();\r\n              }),\r\n\r\n              datasets: [\r\n                {\r\n                  data: historicData.map((coin) => coin[1]),\r\n                  label: `Price ( Past ${days} Days ) in ${currency}`,\r\n                  borderColor: \"#00ffa1\",\r\n                },\r\n              ],\r\n            }}\r\n            options={{\r\n              elements: {\r\n                point: {\r\n                  radius: 1,\r\n                },\r\n              },\r\n            }}\r\n          />\r\n          <Box\r\n            sx={{\r\n              display: \"flex\",\r\n              justifyContent: \"space-around\",\r\n            }}\r\n            width={\"100%\"}\r\n            mt={10}\r\n          >\r\n            {chartDays.map((day) => (\r\n              <Button\r\n                size=\"small\"\r\n                sx={{\r\n                  backgroundColor: \"#00ffa1\",\r\n                  fontWeight: \"bold\",\r\n                  color: \"#020b12\",\r\n                  \"&:hover\": {\r\n                    backgroundColor: \"#00cd81\",\r\n                  },\r\n                }}\r\n                key={day.label}\r\n                variant={\"contained\"}\r\n                onClick={() => setDays(day.value)}\r\n              >\r\n                {day.label}\r\n              </Button>\r\n            ))}\r\n          </Box>\r\n        </>\r\n      )}\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default CoinInfo;\r\n"],"names":["Chart","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","useStyles","makeStyles","container","display","flexDirection","alignItems","justifyContent","marginTop","padding","coin","useState","historicData","setHistoricData","days","setDays","currency","useSelector","state","crypto","value","fetchHistoricalData","axios","HistoricalChart","id","data","prices","useEffect","classes","width","xs","md","className","labels","map","date","Date","time","getHours","getMinutes","toLocaleDateString","datasets","label","borderColor","options","elements","point","radius","sx","mt","day","size","backgroundColor","fontWeight","color","variant","onClick","style","thickness"],"sourceRoot":""}